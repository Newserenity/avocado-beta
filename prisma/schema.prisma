// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  password        String
  phone           String?
  name            String          @unique
  avatarImage     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  status          Status          @default(OK)
  role            Role            @default(USER)
  adAgree         Boolean         @default(false)
  product         Product[]
  ChatRoom        ChatRoom[]
  ChatMessage     ChatMessage[]
  Favorite        Favorite[]
  SearchHistory   SearchHistory[]
  writtenReviews  Review[]        @relation(name: "writtenReviews")
  receivedReviews Review[]        @relation(name: "receivedReviews")
  ViewHistory     ViewHistory[]
}

model Product {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        Int
  title         String
  price         Int
  productStatus ProductStatus  @default(SELL)
  location      String         @default("TOKYO DAITO")
  description   String         @db.MediumText
  viewCount     Int?
  smallCategory SmallCategory  @relation(fields: [categoryId], references: [id])
  categoryId    Int
  productImage  ProductImage[]
  ChatRoom      ChatRoom[]
  Favorite      Favorite[]
  ViewHistory   ViewHistory[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  userId    Int
  productId Int
}

model SearchHistory {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  keyword   String
  createdAt DateTime @default(now())
}

model ViewHistory {
  id        Int      @id @default(autoincrement())
  keyword   String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int      @default(1)
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  url       String
}

model BigCategory {
  id             Int              @id @default(autoincrement())
  code           Int
  name           String
  middleCategory MiddleCategory[]
}

model MiddleCategory {
  id            Int             @id @default(autoincrement())
  code          Int
  name          String
  smallCategory SmallCategory[]
  bigCategory   BigCategory     @relation(fields: [bigCategoryId], references: [id])
  bigCategoryId Int
}

model SmallCategory {
  id               Int            @id @default(autoincrement())
  code             Int
  name             String
  middedCategory   MiddleCategory @relation(fields: [middleCategoryId], references: [id])
  middleCategoryId Int
  Product          Product[]
}

model ChatRoom {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creater     User          @relation(fields: [userId], references: [id])
  product     Product       @relation(fields: [productId], references: [id])
  productId   Int
  userId      Int
  ChatMessage ChatMessage[]
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender     User     @relation(fields: [senderId], references: [id])
  chatRoomId Int
  senderId   Int
  message    String
  read       Read     @default(N)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Read {
  Y
  N
}

enum ProductStatus {
  SELL
  SOLD
  RESERVED
}

enum Status {
  OK
  BAN
}
